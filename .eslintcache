[{"D:\\JS_Project\\slackclone\\src\\index.js":"1","D:\\JS_Project\\slackclone\\src\\firebase.js":"2","D:\\JS_Project\\slackclone\\src\\Spinner.js":"3","D:\\JS_Project\\slackclone\\src\\registerServiceWorker.js":"4","D:\\JS_Project\\slackclone\\src\\components\\App.js":"5","D:\\JS_Project\\slackclone\\src\\actions\\index.js":"6","D:\\JS_Project\\slackclone\\src\\reducers\\index.js":"7","D:\\JS_Project\\slackclone\\src\\components\\Auth\\index.js":"8","D:\\JS_Project\\slackclone\\src\\components\\MetaPanel\\MetaPanel.js":"9","D:\\JS_Project\\slackclone\\src\\components\\Messages\\Messages.js":"10","D:\\JS_Project\\slackclone\\src\\components\\ColorPanel\\ColorPanel.js":"11","D:\\JS_Project\\slackclone\\src\\components\\SidePanel\\SidePanel.js":"12","D:\\JS_Project\\slackclone\\src\\actions\\types.js":"13","D:\\JS_Project\\slackclone\\src\\components\\Auth\\Login.js":"14","D:\\JS_Project\\slackclone\\src\\components\\Auth\\Register.js":"15","D:\\JS_Project\\slackclone\\src\\hooks\\index.js":"16","D:\\JS_Project\\slackclone\\src\\components\\Messages\\MessagesHeader.js":"17","D:\\JS_Project\\slackclone\\src\\components\\Messages\\MsgComp.js":"18","D:\\JS_Project\\slackclone\\src\\components\\Messages\\MessageForm.js":"19","D:\\JS_Project\\slackclone\\src\\components\\SidePanel\\Channels.js":"20","D:\\JS_Project\\slackclone\\src\\components\\SidePanel\\UserPanel.js":"21","D:\\JS_Project\\slackclone\\src\\components\\SidePanel\\DirectMessages.js":"22","D:\\JS_Project\\slackclone\\src\\hooks\\useCustomReducer.js":"23","D:\\JS_Project\\slackclone\\src\\components\\Messages\\ProgressUpload.js":"24","D:\\JS_Project\\slackclone\\src\\components\\Messages\\FileModal.js":"25"},{"size":1909,"mtime":1610792225756,"results":"26","hashOfConfig":"27"},{"size":668,"mtime":1610781372222,"results":"28","hashOfConfig":"27"},{"size":197,"mtime":1610788240774,"results":"29","hashOfConfig":"27"},{"size":4501,"mtime":1610639698397,"results":"30","hashOfConfig":"27"},{"size":1700,"mtime":1611192587414,"results":"31","hashOfConfig":"27"},{"size":638,"mtime":1610904352893,"results":"32","hashOfConfig":"27"},{"size":1217,"mtime":1611192108146,"results":"33","hashOfConfig":"27"},{"size":92,"mtime":1610671912249,"results":"34","hashOfConfig":"27"},{"size":211,"mtime":1610788532111,"results":"35","hashOfConfig":"27"},{"size":3235,"mtime":1611192598609,"results":"36","hashOfConfig":"27"},{"size":453,"mtime":1610854924254,"results":"37","hashOfConfig":"27"},{"size":558,"mtime":1610892348590,"results":"38","hashOfConfig":"27"},{"size":217,"mtime":1611189650672,"results":"39","hashOfConfig":"27"},{"size":2952,"mtime":1610782523914,"results":"40","hashOfConfig":"27"},{"size":5198,"mtime":1610781715654,"results":"41","hashOfConfig":"27"},{"size":85,"mtime":1610794561957,"results":"42","hashOfConfig":"27"},{"size":1303,"mtime":1611189945756,"results":"43","hashOfConfig":"27"},{"size":984,"mtime":1611202533564,"results":"44","hashOfConfig":"27"},{"size":5027,"mtime":1611202370865,"results":"45","hashOfConfig":"27"},{"size":6889,"mtime":1611222852523,"results":"46","hashOfConfig":"27"},{"size":1576,"mtime":1610885915671,"results":"47","hashOfConfig":"27"},{"size":3893,"mtime":1611220654959,"results":"48","hashOfConfig":"27"},{"size":643,"mtime":1611202501775,"results":"49","hashOfConfig":"27"},{"size":392,"mtime":1610886050457,"results":"50","hashOfConfig":"27"},{"size":1800,"mtime":1610873796260,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"16jdk17",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},"D:\\JS_Project\\slackclone\\src\\index.js",[],["109","110"],"D:\\JS_Project\\slackclone\\src\\firebase.js",[],"D:\\JS_Project\\slackclone\\src\\Spinner.js",["111"],"import React from 'react';\r\nimport { Loader,Dimmer } from \"semantic-ui-react\";\r\n\r\nexport default () => (\r\n  <Dimmer active>\r\n    <Loader size=\"huge\" content=\"Preparing chat ...\" />\r\n  </Dimmer>\r\n);","D:\\JS_Project\\slackclone\\src\\registerServiceWorker.js",[],"D:\\JS_Project\\slackclone\\src\\components\\App.js",["112","113","114"],"import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport { useCustomReducer } from \"../hooks\";\r\nimport MetaPanel from \"./MetaPanel/MetaPanel\";\r\nimport SidePanel from \"./SidePanel/SidePanel\";\r\nimport ColorPanel from \"./ColorPanel/ColorPanel\";\r\n\r\nexport const AppContext = React.createContext({})\r\nconst initData = {\r\n  user : {},\r\n  channel : {},\r\n  isPrivateChannel :false\r\n}\r\nconst App = (props) => {\r\n  const [dataReducer,reducerFunc] = useCustomReducer(initData);\r\n  \r\n  React.useEffect(() => {\r\n    if(props.currentChannel.id){\r\n      reducerFunc('channel',props.currentChannel)\r\n    }\r\n  },[props.currentChannel.id])\r\n  React.useEffect(() => {\r\n    reducerFunc('isPrivateChannel',props.isPrivateChannel,'conventional')\r\n  },[props.isPrivateChannel])\r\n  React.useEffect(() => {\r\n    if(props.currentUser){\r\n      reducerFunc('user',props.currentUser)\r\n    }\r\n  },[])\r\n\r\n  return (\r\n  <AppContext.Provider \r\n    value={{\r\n        appData : dataReducer,\r\n        appDispatch : reducerFunc\r\n      }}\r\n    >\r\n    <Grid columns=\"equal\" className=\"app\" style={{background : '#eee'}}>\r\n      <ColorPanel />\r\n      <SidePanel />\r\n      <Grid.Column style={{marginLeft : 320}}>\r\n        <Messages />\r\n      </Grid.Column>\r\n      <Grid.Column width={4}>\r\n        <MetaPanel />\r\n      </Grid.Column>\r\n    </Grid>\r\n  </AppContext.Provider>\r\n  )\r\n}\r\nconst mapStateToProps = state => ({\r\n  currentUser : state.user.currentUser,\r\n  currentChannel : state.channel.currentChannel,\r\n  isPrivateChannel : state.channel.isPrivateChannel\r\n})\r\nexport default connect(mapStateToProps)(App);\r\n","D:\\JS_Project\\slackclone\\src\\actions\\index.js",[],"D:\\JS_Project\\slackclone\\src\\reducers\\index.js",[],"D:\\JS_Project\\slackclone\\src\\components\\Auth\\index.js",[],"D:\\JS_Project\\slackclone\\src\\components\\MetaPanel\\MetaPanel.js",["115"],"import React from 'react';\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\nclass MetaPanel extends React.Component{\r\n  render(){\r\n    return(\r\n      <div>MetaPanel</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MetaPanel;","D:\\JS_Project\\slackclone\\src\\components\\Messages\\Messages.js",["116"],"import React from 'react';\r\nimport MsgComp from \"./MsgComp\";\r\nimport { AppContext } from \"../App\";\r\nimport firebase from \"../../firebase\";\r\nimport MessageForm from \"./MessageForm\";\r\nimport MessagesHeader from \"./MessagesHeader\";\r\nimport { useCustomReducer } from \"../../hooks\";\r\nimport { Segment,Comment } from \"semantic-ui-react\";\r\n\r\nexport const MessageContext = React.createContext({});\r\nconst initData = {\r\n  messagesRef : firebase.database().ref('messages'),\r\n  privateMessagesRef : firebase.database().ref('privateMessages'),\r\n  allMsg : [],\r\n  msgLoad : true,\r\n  getAllUniqueUser : 0,\r\n  searchTerm :{\r\n    loading : false,\r\n    query : '',\r\n    results : []\r\n  }\r\n}\r\nconst Messages = () => {\r\n  const {appData} = React.useContext(AppContext)\r\n  const [dataReducer,reducerFunc] = useCustomReducer(initData);\r\n\r\n  const countUniqueUser = msg => {\r\n    let getAllUniqueUser = msg.reduce((acc,message) => {\r\n      if(!acc.includes(message.user.name)){\r\n        acc.push(message.user.name)\r\n      }\r\n      return acc;\r\n    },[])\r\n    reducerFunc('getAllUniqueUser',getAllUniqueUser.length,'conventional');\r\n  }\r\n  const addListeners = dt => {\r\n    let loadedMsg = [];\r\n    const ref = getMessagesRef();\r\n\r\n    ref.child(dt).on('child_added', snap => {\r\n      loadedMsg.push(snap.val());\r\n      reducerFunc('allMsg',loadedMsg,'conventional');\r\n      reducerFunc('msgLoad',false,'conventional');\r\n      countUniqueUser(loadedMsg);\r\n    })\r\n  }\r\n  const getMessagesRef = () => {\r\n    const {messagesRef,privateMessagesRef} = dataReducer;\r\n    const { isPrivateChannel } = appData;\r\n    return isPrivateChannel ? privateMessagesRef : messagesRef;\r\n  }\r\n  const isUploadingFile = percent => {\r\n    if(percent > 0 && percent < 100) {\r\n      return true\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const handleSearchChange = event => {\r\n    reducerFunc('searchTerm',{query : event.target.value, loading: true});\r\n    const channelMsg = [...dataReducer.allMsg];\r\n    const rx = new RegExp(event.target.value,'gi');\r\n    const searchResults = channelMsg.reduce((acc,msg) => {\r\n      if((msg.content && msg.content.match(rx)) || (msg.user.name && msg.user.name.match(rx))){\r\n        acc.push(msg)\r\n      }\r\n      return acc\r\n    },[]);\r\n    setTimeout(() => \r\n      reducerFunc('searchTerm',{results : searchResults, loading: false})\r\n    ,700);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if(appData.user && appData.channel.id){\r\n      addListeners(appData.channel.id)\r\n    }\r\n  },[appData.channel.id])  \r\n\r\n  return(\r\n    <MessageContext.Provider \r\n      value={{\r\n        msgData : dataReducer,\r\n        msgDispatch : reducerFunc\r\n      }}\r\n    >\r\n      <MessagesHeader handleSearchChange={handleSearchChange} /> \r\n      <Segment>\r\n        <Comment.Group className={isUploadingFile ? \"messages__progress\": \"messages\"}>\r\n          {dataReducer.searchTerm.query ? dataReducer.searchTerm.results.map(x => <MsgComp key={x.timestamp} msg={x} />)\r\n          : dataReducer.allMsg.map(x => <MsgComp key={x.timestamp} msg={x} />)}\r\n        </Comment.Group>\r\n      </Segment>\r\n\r\n      <MessageForm \r\n        isUploadingFile={isUploadingFile} \r\n        getMessagesRef={getMessagesRef} \r\n      />\r\n    </MessageContext.Provider>\r\n  )\r\n}\r\n\r\nexport default Messages;","D:\\JS_Project\\slackclone\\src\\components\\ColorPanel\\ColorPanel.js",[],"D:\\JS_Project\\slackclone\\src\\components\\SidePanel\\SidePanel.js",[],"D:\\JS_Project\\slackclone\\src\\actions\\types.js",[],"D:\\JS_Project\\slackclone\\src\\components\\Auth\\Login.js",[],"D:\\JS_Project\\slackclone\\src\\components\\Auth\\Register.js",[],"D:\\JS_Project\\slackclone\\src\\hooks\\index.js",[],"D:\\JS_Project\\slackclone\\src\\components\\Messages\\MessagesHeader.js",[],"D:\\JS_Project\\slackclone\\src\\components\\Messages\\MsgComp.js",[],"D:\\JS_Project\\slackclone\\src\\components\\Messages\\MessageForm.js",["117","118"],"import React from 'react';\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { AppContext } from \"../App\";\r\nimport FileModal from \"./FileModal\";\r\nimport firebase from \"../../firebase\";\r\nimport { MessageContext } from \"./Messages\";\r\nimport ProgressUpload from \"./ProgressUpload\";\r\nimport { useCustomReducer } from \"../../hooks\";\r\nimport { Segment,Button,Input } from \"semantic-ui-react\";\r\n\r\nconst initData = {\r\n  storageRef : firebase.storage().ref(),\r\n  message : '',\r\n  loading : false,\r\n  errors: [],\r\n  modalUpload : {\r\n    visible : false,\r\n    uploadState : '',\r\n    uploadTask : null,\r\n    percentUploaded : 0,\r\n    errors: []\r\n  }\r\n}\r\nconst MessageForm = ({isUploadingFile,getMessagesRef}) => {\r\n  const [dataReducer,reducerFunc] = useCustomReducer(initData);\r\n  const {msgData} = React.useContext(MessageContext);\r\n  const {appData} = React.useContext(AppContext);\r\n\r\n  const handleChange = event => {\r\n    reducerFunc('message',event.target.value,'conventional')\r\n  }\r\n  const openModal = () => reducerFunc('modalUpload',{visible : true});\r\n  const createMessage = (fileUrl = null) => {\r\n    const msg = {\r\n      timestamp : firebase.database.ServerValue.TIMESTAMP,\r\n      user : {\r\n        id : appData.user.uid,\r\n        name : appData.user.displayName,\r\n        avatar : appData.user.photoURL\r\n      },\r\n    }\r\n    if(fileUrl){\r\n      msg['image'] = fileUrl;\r\n    }else{\r\n      msg['content'] = dataReducer.message;\r\n    }\r\n    return msg\r\n  }\r\n\r\n  const sendMessage = () => {\r\n    if(dataReducer.message){\r\n      reducerFunc('loading',true,'conventional')\r\n      getMessagesRef()\r\n        .child(appData.channel.id)\r\n        .push()\r\n        .set(createMessage())\r\n        .then(() => {\r\n          reducerFunc('loading',false,'conventional')\r\n          reducerFunc('message','','conventional')\r\n        }).catch(err => {\r\n          reducerFunc('errors',[...dataReducer.errors,err],'conventional')\r\n          reducerFunc('loading',false,'conventional')\r\n        })\r\n    }else{\r\n      reducerFunc('errors',[...dataReducer.errors,{message : 'Add a message'}],'conventional')\r\n    }\r\n  }\r\n  const errorUpload = err => reducerFunc('modalUpload',{\r\n    errors : err,\r\n    uploadState : 'error',\r\n    uploadTask : null\r\n  })\r\n  const getPath = () => {\r\n    if(appData.isPrivateChannel){\r\n      return `chat/private-${appData.channel.id}`;\r\n    }else{\r\n      return 'chat/public';\r\n    }\r\n  }\r\n  const uploadFile = (file,metadata) => {\r\n    const filePath = `${getPath()}/${uuidv4()}.jpg`;\r\n\r\n    reducerFunc('modalUpload',{\r\n      uploadState : 'uploading',\r\n      uploadTask : dataReducer.storageRef.child(filePath).put(file,metadata)\r\n    })\r\n  }\r\n\r\n  const processUpload = () => {\r\n    const pathToUpload = appData.channel.id;\r\n    const ref = getMessagesRef();\r\n    if(dataReducer.modalUpload.uploadTask){\r\n      dataReducer.modalUpload.uploadTask.on('state_changed',snap => {\r\n        const percentUploaded = Math.round((snap.bytesTransferred / snap.totalBytes) * 100)\r\n        isUploadingFile(percentUploaded)\r\n        reducerFunc('modalUpload',{percentUploaded})\r\n      },err => {\r\n        errorUpload(err)\r\n      },() => {\r\n        dataReducer.modalUpload.uploadTask.snapshot.ref.getDownloadURL().then(url => {\r\n          sendFileMsg(url,ref,pathToUpload)\r\n        }).catch(err => {\r\n          errorUpload(err)\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  const sendFileMsg = (url,ref,pathToUpload) => {\r\n    ref\r\n      .child(pathToUpload)\r\n      .push()\r\n      .set(createMessage(url))\r\n      .then(() => {\r\n        reducerFunc('modalUpload',{\r\n          uploadState : 'done',\r\n        })\r\n      }).catch(err => {\r\n        errorUpload(err)\r\n      })\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    processUpload();\r\n  },[dataReducer.modalUpload.uploadTask])\r\n\r\n  return(\r\n    <Segment className=\"message__form\">\r\n      <Input\r\n        fluid\r\n        style={{marginBottom : '0.7em'}}\r\n        label={<Button icon=\"add\" />}\r\n        labelPosition=\"left\"\r\n        onChange={handleChange}\r\n        value={dataReducer.message}\r\n        placeholder=\"Write your message\"\r\n        className={dataReducer.errors.some(err => err.message.includes('message')) ? 'error' : ''}\r\n        name=\"message\"\r\n      />\r\n      <Button.Group icon widths=\"2\">\r\n        <Button \r\n          onClick={sendMessage}\r\n          color=\"orange\"\r\n          disabled={dataReducer.loading}\r\n          loading={dataReducer.loading}\r\n          content=\"Add Reply\"\r\n          labelPosition=\"left\"\r\n          icon=\"edit\"\r\n        />\r\n        <Button \r\n          color=\"teal\"\r\n          disabled={dataReducer.modalUpload.uploadState === 'uploading'}\r\n          onClick={openModal}\r\n          content=\"Upload Media\"\r\n          labelPosition=\"right\"\r\n          icon=\"cloud\"\r\n        />\r\n      </Button.Group>\r\n      <FileModal \r\n        dataMsgForm={dataReducer} \r\n        reducerFuncMsgForm={reducerFunc} \r\n        uploadFile={uploadFile}\r\n      />\r\n      <ProgressUpload \r\n        dataMsgForm={dataReducer} \r\n      />\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default MessageForm;","D:\\JS_Project\\slackclone\\src\\components\\SidePanel\\Channels.js",["119","120"],"D:\\JS_Project\\slackclone\\src\\components\\SidePanel\\UserPanel.js",[],"D:\\JS_Project\\slackclone\\src\\components\\SidePanel\\DirectMessages.js",["121","122"],"D:\\JS_Project\\slackclone\\src\\hooks\\useCustomReducer.js",[],"D:\\JS_Project\\slackclone\\src\\components\\Messages\\ProgressUpload.js",[],"D:\\JS_Project\\slackclone\\src\\components\\Messages\\FileModal.js",["123"],"import React from 'react';\r\nimport mime from \"mime-types\";\r\nimport { useCustomReducer } from \"../../hooks\";\r\nimport { Input,Modal,Button,Icon } from \"semantic-ui-react\";\r\n\r\nconst initData ={\r\n  file : null,\r\n  authorized : ['image/png','image/jpeg']\r\n}\r\nexport default ({dataMsgForm,reducerFuncMsgForm,uploadFile}) => {\r\n  const [dataReducer,reducerFunc] = useCustomReducer(initData);\r\n\r\n  const closeModal = () => reducerFuncMsgForm('modalUpload',{visible : false});\r\n  const handleChange = (event) => {\r\n    const fileUploaded = event.target.files[0]\r\n    if(fileUploaded){\r\n      reducerFunc('file',fileUploaded,'conventional')\r\n    }\r\n  }\r\n  const isAuthorized = filename => dataReducer.authorized.includes(mime.lookup(filename));\r\n \r\n  const sendFile = () => {\r\n    if(dataReducer.file){\r\n      if(isAuthorized(dataReducer.file.name)){\r\n        // send file\r\n        const metadata = { contentType : mime.lookup(dataReducer.file.name) };\r\n        uploadFile(dataReducer.file,metadata);\r\n        closeModal()\r\n        reducerFunc('file',null,'conventional')\r\n      }\r\n    }\r\n  }\r\n\r\n  return(\r\n  <Modal\r\n    basic\r\n    open={dataMsgForm.modalUpload.visible}\r\n    onClose={closeModal}\r\n  >\r\n    <Modal.Header>Select an Image File</Modal.Header>\r\n    <Modal.Content>\r\n      <Input \r\n        fluid\r\n        onChange={handleChange}\r\n        label=\"File type : jpg, png\"\r\n        name=\"file\"\r\n        type=\"file\"\r\n      />\r\n    </Modal.Content>\r\n    <Modal.Actions>\r\n      <Button\r\n        color=\"green\"\r\n        inverted\r\n        onClick={sendFile}\r\n      >\r\n        <Icon name=\"checkmark\" /> Send\r\n      </Button>\r\n      <Button\r\n        color=\"red\"\r\n        inverted\r\n        onClick={closeModal}\r\n      >\r\n        <Icon name=\"remove\" /> Cancel\r\n      </Button>\r\n    </Modal.Actions>\r\n  </Modal>)\r\n}",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":4,"column":1,"nodeType":"130","endLine":8,"endColumn":3},{"ruleId":"131","severity":1,"message":"132","line":24,"column":5,"nodeType":"133","endLine":24,"endColumn":30,"suggestions":"134"},{"ruleId":"131","severity":1,"message":"135","line":27,"column":5,"nodeType":"133","endLine":27,"endColumn":29,"suggestions":"136"},{"ruleId":"131","severity":1,"message":"137","line":32,"column":5,"nodeType":"133","endLine":32,"endColumn":7,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":2,"column":10,"nodeType":"141","messageId":"142","endLine":2,"endColumn":14},{"ruleId":"131","severity":1,"message":"143","line":78,"column":5,"nodeType":"133","endLine":78,"endColumn":25,"suggestions":"144"},{"ruleId":"139","severity":1,"message":"145","line":26,"column":10,"nodeType":"141","messageId":"142","endLine":26,"endColumn":17},{"ruleId":"131","severity":1,"message":"146","line":125,"column":5,"nodeType":"133","endLine":125,"endColumn":41,"suggestions":"147"},{"ruleId":"131","severity":1,"message":"148","line":29,"column":5,"nodeType":"133","endLine":29,"endColumn":34,"suggestions":"149"},{"ruleId":"131","severity":1,"message":"150","line":33,"column":5,"nodeType":"133","endLine":33,"endColumn":7,"suggestions":"151"},{"ruleId":"131","severity":1,"message":"152","line":28,"column":5,"nodeType":"133","endLine":28,"endColumn":23,"suggestions":"153"},{"ruleId":"131","severity":1,"message":"154","line":75,"column":5,"nodeType":"133","endLine":75,"endColumn":31,"suggestions":"155"},{"ruleId":"128","severity":1,"message":"129","line":10,"column":1,"nodeType":"130","endLine":67,"endColumn":2},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.currentChannel' and 'reducerFunc'. Either include them or remove the dependency array.","ArrayExpression",["158"],"React Hook React.useEffect has a missing dependency: 'reducerFunc'. Either include it or remove the dependency array.",["159"],"React Hook React.useEffect has missing dependencies: 'props.currentUser' and 'reducerFunc'. Either include them or remove the dependency array.",["160"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","React Hook React.useEffect has missing dependencies: 'addListeners' and 'appData.user'. Either include them or remove the dependency array.",["161"],"'msgData' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'processUpload'. Either include it or remove the dependency array.",["162"],"React Hook React.useEffect has a missing dependency: 'setFirstChannel'. Either include it or remove the dependency array.",["163"],"React Hook React.useEffect has missing dependencies: 'addListeners' and 'dataReducer.channelsRef.off'. Either include them or remove the dependency array.",["164"],"React Hook React.useEffect has a missing dependency: 'addListener'. Either include it or remove the dependency array.",["165"],"React Hook React.useEffect has missing dependencies: 'addStatusToUser', 'appData.user.uid', and 'dataReducer.presenceRef'. Either include them or remove the dependency array.",["166"],"no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},"Update the dependencies array to be: [props.currentChannel, props.currentChannel.id, reducerFunc]",{"range":"185","text":"186"},"Update the dependencies array to be: [props.isPrivateChannel, reducerFunc]",{"range":"187","text":"188"},"Update the dependencies array to be: [props.currentUser, reducerFunc]",{"range":"189","text":"190"},"Update the dependencies array to be: [addListeners, appData.channel.id, appData.user]",{"range":"191","text":"192"},"Update the dependencies array to be: [dataReducer.modalUpload.uploadTask, processUpload]",{"range":"193","text":"194"},"Update the dependencies array to be: [dataReducer.channels.length, setFirstChannel]",{"range":"195","text":"196"},"Update the dependencies array to be: [addListeners, dataReducer.channelsRef.off]",{"range":"197","text":"198"},"Update the dependencies array to be: [addListener, appData.user.uid]",{"range":"199","text":"200"},"Update the dependencies array to be: [addStatusToUser, appData.user.uid, dataReducer.presenceRef, dataReducer.users.length]",{"range":"201","text":"202"},[722,747],"[props.currentChannel, props.currentChannel.id, reducerFunc]",[856,880],"[props.isPrivateChannel, reducerFunc]",[994,996],"[props.currentUser, reducerFunc]",[2462,2482],"[addListeners, appData.channel.id, appData.user]",[3715,3751],"[dataReducer.modalUpload.uploadTask, processUpload]",[855,884],"[dataReducer.channels.length, setFirstChannel]",[980,982],"[addListeners, dataReducer.channelsRef.off]",[869,887],"[addListener, appData.user.uid]",[2277,2303],"[addStatusToUser, appData.user.uid, dataReducer.presenceRef, dataReducer.users.length]"]